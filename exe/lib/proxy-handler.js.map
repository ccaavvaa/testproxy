{"version":3,"sources":["../../src/lib/proxy-handler.ts"],"names":[],"mappings":";;;;;;;;;;AACA,2BAA2B;AAE3B,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAWxC,yBAAyB,YAAiC;IACtD,MAAM,CAAC,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QACnD,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;aACvB,KAAK,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC,CAAC;AACN,CAAC;AAED,8BAA8B,GAAW;IACrC,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzB,MAAM,MAAM,GAAG,CAAC,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;IAC1C,MAAM,IAAI,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC;IAC7C,MAAM,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED;IAGI,IAAW,OAAO;QACd,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IACD;QACI,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IAGO,WAAW;QACf,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAC9C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,QAAa,EAAE,GAAQ,EAAE,GAAQ,EAAE,OAAY;YACvE,MAAM,SAAS,GAAe,GAAG,CAAC,gBAAgB,CAAC;YACnD,EAAE,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC3B,SAAS,CAAC,cAAc,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;YAC1D,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACO,OAAO,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QAC3D,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IAChE,CAAC;IAEa,UAAU,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;;YACpE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAC/C,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBAC3D,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;gBAC1B,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;gBACrB,GAAW,CAAC,gBAAgB,GAAG,SAAS,CAAC;gBACzC,GAAW,CAAC,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC;gBAC/B,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC;gBACxB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;YAClE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,EAAE,CAAC;YACX,CAAC;QACL,CAAC;KAAA;CACJ;AAzCD,oCAyCC","file":"proxy-handler.js","sourcesContent":["import { Request, Response, RequestHandler, NextFunction } from 'express';\r\nimport * as URL from 'url';\r\n\r\nconst httpProxy = require('http-proxy');\r\nexport interface IProxyInfo {\r\n    url: string;\r\n    target?: string;\r\n    path?: string;\r\n    rewriteRequest?: (reqProxy: any, req: any, res: any, options: any) => any;\r\n}\r\n\r\n// tslint:disable-next-line:interface-name\r\ntype AsyncRequestHandler = (req: Request, res: Response, next: NextFunction) => Promise<any>;\r\n\r\nfunction asyncMiddleware(asyncHandler: AsyncRequestHandler): RequestHandler {\r\n    return (req: Request, res: Response, next: NextFunction) => {\r\n        asyncHandler(req, res, next)\r\n            .catch(next);\r\n    };\r\n}\r\n\r\nfunction extractTargetAndPath(url: string): [string, string] {\r\n    const u = URL.parse(url);\r\n    const target = u.protocol + '//' + u.host;\r\n    const path = u.path + (u.hash ? u.hash : '');\r\n    return [target, path];\r\n}\r\n\r\nexport abstract class ProxyHandler {\r\n    private _handler: RequestHandler;\r\n    private _proxy: any;\r\n    public get handler(): RequestHandler {\r\n        if (!this._handler) {\r\n            this._handler = this.execute.bind(this);\r\n        }\r\n        return this._handler;\r\n    }\r\n    constructor() {\r\n        this.createProxy();\r\n    }\r\n\r\n    public abstract getProxyInfo(req: Request): Promise<IProxyInfo>;\r\n    private createProxy() {\r\n        this._proxy = httpProxy.createProxyServer({});\r\n        this._proxy.on('proxyReq', (proxyReq: any, req: any, res: any, options: any) => {\r\n            const proxyInfo: IProxyInfo = req.proxyHandlerInfo;\r\n            if (proxyInfo.rewriteRequest) {\r\n                proxyInfo.rewriteRequest(proxyReq, req, res, options);\r\n            }\r\n        });\r\n    }\r\n    private execute(req: Request, res: Response, next: NextFunction): any {\r\n        asyncMiddleware(this.middleware.bind(this))(req, res, next);\r\n    }\r\n\r\n    private async middleware(req: Request, res: Response, next: NextFunction): Promise<any> {\r\n        const proxyInfo = await this.getProxyInfo(req);\r\n        if (proxyInfo) {\r\n            const [target, path] = extractTargetAndPath(proxyInfo.url);\r\n            proxyInfo.target = target;\r\n            proxyInfo.path = path;\r\n            (req as any).proxyHandlerInfo = proxyInfo;\r\n            (req as any).origUrl = req.url;\r\n            req.url = proxyInfo.url;\r\n            this._proxy.web(req, res, next, { target: proxyInfo.target });\r\n        } else {\r\n            next();\r\n        }\r\n    }\r\n}\r\n"]}